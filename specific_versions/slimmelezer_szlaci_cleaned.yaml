substitutions:
  device_name: "slimmelezer-d545"
  device_friendly_name: "SlimmeLezer HU D545"
  device_description: "DIY P1 module to read your smart meter, HU D545 edition/afarago"

esphome:
  name: "${device_name}"
  comment: "${device_description}"
  name_add_mac_suffix: false
  project:
    name: zuidwijk.slimmelezer
    version: "2.0"
  # on_boot:
  #   then:
  #     - if:
  #         condition:
  #           lambda: return id(has_key);
  #         then:
  #           - lambda: |-
  #               std::string key(id(stored_decryption_key), 32);
  #               id(dsmr_instance).set_decryption_key(key);
  #         else:
  #           - logger.log:
  #               level: info
  #               format: "Not using decryption key. If you need to set a key use Home Assistant service 'ESPHome:  ${device_name}_set_dsmr_key'"

esp8266:
  board: d1_mini
  restore_from_flash: true

external_components:
  - source: components
    components: [dsmr]

wifi:
  networks:
    - ssid: "ABCD"
      password: "1234"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}

# improv_serial:

captive_portal:

# Enable logging
logger:
  baud_rate: 0
  level: INFO
  # level: DEBUG

# Enable Home Assistant API
api:

ota:
  # password: !secret ota_password
  safe_mode: yes

# dashboard_import:
#   package_import_url: github://zuidwijk/dsmr/slimmelezer.yaml

web_server:
  port: 80

uart:
  baud_rate: 115200
  rx_pin: D7
  rx_buffer_size: 3000
      
# globals:
#   - id: has_key
#     type: bool
#     restore_value: yes
#     initial_value: "false"
#   - id: stored_decryption_key
#     type: char[32]
#     restore_value: yes

dsmr:
  id: dsmr_instance
  # For Luxembourg users set here your decryption key
  #decryption_key: !secret decryption_key // enable this when using decryption for Luxembourg; key like '00112233445566778899AABBCCDDEEFF'
  crc_check: false
  max_telegram_length: 3000
  receive_timeout: 200ms

sensor:
  - platform: dsmr
    energy_delivered:
      name: "${device_friendly_name} Energy Consumed"
    energy_delivered_tariff1:
      name: "${device_friendly_name} Energy Consumed Tariff 1"
    energy_delivered_tariff2:
      name: "${device_friendly_name} Energy Consumed Tariff 2"
    energy_returned:
      name: "${device_friendly_name} Energy Produced"
    energy_returned_tariff1:
      name: "${device_friendly_name} Energy Produced Tariff 1"
    energy_returned_tariff2:
      name: "${device_friendly_name} Energy Produced Tariff 2"
    power_delivered:
      name: "${device_friendly_name} Power Consumed"
    power_returned:
      name: "${device_friendly_name} Power Produced"
    # electricity_threshold: # missing unit
    #   name: "${device_friendly_name} Electricity Threshold"
    electricity_tariff:
      name: "${device_friendly_name} Electricity Tariff"
    frequency:
      name: "${device_friendly_name} Frequency"
    energy_absolute:
      name: "${device_friendly_name} Absolute active energy"
      
    voltage_l1:
      name: "${device_friendly_name} Voltage Phase 1"
    voltage_l2:
      name: "${device_friendly_name} Voltage Phase 2"
    voltage_l3:
      name: "${device_friendly_name} Voltage Phase 3"
    current_l1:
      name: "${device_friendly_name} Current Phase 1"
    current_l2:
      name: "${device_friendly_name} Current Phase 2"
    current_l3:
      name: "${device_friendly_name} Current Phase 3"

    # reactive_energy_qi:
    #   name: "${device_friendly_name} Reactive Energy QI"
    # reactive_energy_qii:
    #   name: "${device_friendly_name} Reactive Energy QII"
    # reactive_energy_qiii:
    #   name: "${device_friendly_name} Reactive Energy QIII"
    # reactive_energy_qiv:
    #   name: "${device_friendly_name} Reactive Energy QIV"
    # instantaneous_power_factor:
    #   name: "${device_friendly_name} Instantaneous Power Factor"
    # instantaneous_power_factor_l1:
    #   name: "${device_friendly_name} Instantaneous Power Factor Phase 1"
    # instantaneous_power_factor_l2:
    #   name: "${device_friendly_name} Instantaneous Power Factor Phase 2"
    # instantaneous_power_factor_l3:
    #   name: "${device_friendly_name} Instantaneous Power Factor Phase 3"
    # reactive_power_qi:
    #   name: "${device_friendly_name} Reactive Power QI"
    # reactive_power_qii:
    #   name: "${device_friendly_name} Reactive Power QII"
    # reactive_power_qiii:
    #   name: "${device_friendly_name} Reactive Power QIII"
    # reactive_power_qiv:
    #   name: "${device_friendly_name} Reactive Power QIV"
    # energy_positive_reactive:
    #   name: "${device_friendly_name} Positive reactive energy (Q+)"
    # energy_negative_reactive:
    #   name: "${device_friendly_name} Negative reactive energy (Q-)"
    # energy_negative_reactive_tariff1:
    #   name: "${device_friendly_name} Megative reactive energy (Q-) in tariff T1"

  - platform: uptime
    name: "${device_friendly_name} Uptime"
  - platform: wifi_signal
    name: "${device_friendly_name} Wi-Fi RSSI Signal"
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device_friendly_name} IP Address"
    ssid:
      name: "${device_friendly_name} Wi-Fi SSID"
    bssid:
      name: "${device_friendly_name} Wi-Fi BSSID"

  - platform: dsmr
    identification:
      name: "${device_friendly_name} Identification"
    equipment_id:
      name: "${device_friendly_name} Equipment Id"
    breaker_status:
      name: "${device_friendly_name} Breaker Status"
